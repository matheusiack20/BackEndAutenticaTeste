const User = require('../models/User');
const mongoose = require('mongoose');
const mongoLog = require('../utils/mongoLog');
const fs = require('fs');
const path = require('path');
// Importar utilit√°rio de gerenciamento de diret√≥rios se necess√°rio
const dirManager = require('../utils/dirManager');

// Corrigir a importa√ß√£o do User model que pode estar exportando como default
// e n√£o como module.exports padr√£o do CommonJS
const UserModel = User.default || User;

// Importar a conex√£o secund√°ria
const database = require('../config/database');
let secondaryConnection = null;

// Fun√ß√£o para inicializar a conex√£o secund√°ria (lazy loading) com tratamento de erro melhorado
async function getSecondaryConnection() {
  try {
    if (!secondaryConnection) {
      console.log('Inicializando conex√£o com banco de dados secund√°rio...');
      
      if (!process.env.MONGO_URI_USER_BD) {
        console.error('‚ùå MONGO_URI_USER_BD n√£o est√° definido no arquivo .env');
        throw new Error('String de conex√£o do banco de dados secund√°rio n√£o est√° configurada');
      }
      
      secondaryConnection = await database.connectToDatabase2();
      
      if (!secondaryConnection) {
        throw new Error('Conex√£o secund√°ria retornou nulo');
      }
      
      if (secondaryConnection.readyState !== 1) {
        throw new Error(`Conex√£o secund√°ria n√£o est√° pronta: estado ${secondaryConnection.readyState}`);
      }
      
      console.log('‚úÖ Conex√£o com banco de dados secund√°rio inicializada com sucesso');
    }
    return secondaryConnection;
  } catch (error) {
    console.error('‚ùå Erro ao obter conex√£o secund√°ria:', error);
    
    // Se j√° temos uma conex√£o, tente us√°-la mesmo assim
    if (secondaryConnection) {
      console.log('Tentando usar conex√£o existente mesmo com erro');
      return secondaryConnection;
    }
    
    throw error; // Repassar o erro para tratamento superior
  }
}

/**
 * Mapeia o ID do plano para o n√∫mero do plano interno
 * @param {string} planName - Nome do plano
 * @returns {number} N√∫mero do plano interno
 */
function mapPlanNameToNumber(planName) {
  if (!planName) return null;
  
  const planNameLower = planName.toLowerCase();
  if (planNameLower.includes('iniciante')) return 1;
  if (planNameLower.includes('especialista')) return 2;
  if (planNameLower.includes('pro')) return 3;
  
  return null;
}

/**
 * Verifica e localiza um usu√°rio de forma mais robusta, tentando v√°rias abordagens
 * @param {string} userId - ID do usu√°rio a ser localizado
 * @returns {Promise<Object|null>} Usu√°rio encontrado ou null
 */
exports.findUserRobustly = async (userId) => {
  try {
    if (!userId) {
      console.log('ID de usu√°rio n√£o fornecido');
      return null;
    }
    
    console.log(`Tentando localizar usu√°rio de forma robusta: ${userId}`);
    
    // 1. M√©todo padr√£o - findById direto
    try {
      const user = await UserModel.findById(userId);
      if (user) {
        console.log(`‚úÖ Usu√°rio encontrado com findById padr√£o: ${user.name || user.email}`);
        return user;
      }
    } catch (e) {
      console.log(`Erro ao usar findById: ${e.message}`);
    }
    
    // 2. Verificar espa√ßos extras e outros problemas de formato
    const cleanedId = userId.trim();
    if (cleanedId !== userId) {
      try {
        console.log(`Tentando com ID limpo: "${cleanedId}"`);
        const user = await UserModel.findById(cleanedId);
        if (user) {
          console.log(`‚úÖ Usu√°rio encontrado ap√≥s limpeza do ID: ${user.name || user.email}`);
          return user;
        }
      } catch (e) {
        console.log(`Erro ao buscar com ID limpo: ${e.message}`);
      }
    }
    
    // 3. Tentar com um novo ObjectId
    if (mongoose.Types.ObjectId.isValid(userId)) {
      try {
        const objectId = new mongoose.Types.ObjectId(userId);
        console.log(`Tentando com novo ObjectId: ${objectId}`);
        const user = await UserModel.findOne({ _id: objectId });
        if (user) {
          console.log(`‚úÖ Usu√°rio encontrado com novo ObjectId: ${user.name || user.email}`);
          return user;
        }
      } catch (e) {
        console.log(`Erro ao buscar com novo ObjectId: ${e.message}`);
      }
    }
    
    // SOLU√á√ÉO: Tentar buscar qualquer usu√°rio no sistema se s√≥ tiver um usu√°rio
    const totalUsers = await UserModel.countDocuments();
    console.log(`Verificando n√∫mero total de usu√°rios: ${totalUsers}`);
    
    if (totalUsers === 1) {
      console.log('üîç H√° apenas UM usu√°rio no banco de dados, buscando ele diretamente...');
      const singleUser = await UserModel.findOne({});
      if (singleUser) {
        console.log(`‚úÖ Encontrado o √∫nico usu√°rio do sistema: ${singleUser.name || singleUser.email} (ID: ${singleUser._id})`);
        return singleUser;
      }
    }
    
    // Caso especial: buscar por qualquer usu√°rio no sistema como √∫ltimo recurso
    console.log('üìã Buscando QUALQUER usu√°rio no sistema como fallback...');
    
    // Listar todos os usu√°rios para diagn√≥stico
    const allUsers = await UserModel.find().limit(5);
    console.log(`Encontrados ${allUsers.length} usu√°rios no banco:`);
    
    for (const user of allUsers) {
      console.log(`- ID: ${user._id}, Nome: ${user.name || 'Sem nome'}, Email: ${user.email || 'Sem email'}`);
    }
    
    if (allUsers.length > 0) {
      console.log(`‚úÖ Usando o primeiro usu√°rio encontrado como fallback: ${allUsers[0]._id}`);
      return allUsers[0];
    }
    
    console.log('‚ùå N√£o foi poss√≠vel encontrar nenhum usu√°rio por nenhum m√©todo');
    return null;
  } catch (error) {
    console.error('Erro ao buscar usu√°rio de forma robusta:', error);
    return null;
  }
};

/**
 * Atualiza o plano do usu√°rio no banco de dados myDatabase com detalhes completos
 * @param {string} userId - ID do usu√°rio
 * @param {string} planId - ID do plano no Pagarme
 * @param {string} subscriptionId - ID da assinatura no Pagarme
 * @param {object} planDetails - Detalhes adicionais do plano (opcional)
 * @returns {Promise<Object>} Usu√°rio atualizado
 */
exports.updateUserPlan = async (userId, planId, subscriptionId, planDetails = {}) => {
  // N√∫mero m√°ximo de tentativas
  const MAX_ATTEMPTS = 3;
  let attempts = 0;
  let lastError = null;

  // Garantir que os diret√≥rios existem
  dirManager.initDirectories();

  while (attempts < MAX_ATTEMPTS) {
    attempts++;
    try {
      console.log(`[Tentativa ${attempts}] Atualizando plano do usu√°rio: userId=${userId}, planId=${planId}, subscriptionId=${subscriptionId}`);
      
      // Verificar conex√£o com banco de dados principal
      const connectionState = mongoose.connection.readyState;
      console.log(`Estado da conex√£o MongoDB (principal): ${connectionState} (0=desconectado, 1=conectado, 2=conectando, 3=desconectando)`);
      
      // Obter conex√£o secund√°ria (myDatabase)
      const secondConn = await getSecondaryConnection();
      if (!secondConn) {
        throw new Error('Falha ao obter conex√£o com banco de dados secund√°rio (myDatabase)');
      }
      console.log(`Conex√£o secund√°ria (myDatabase) estabelecida: ${secondConn.readyState}`);
      
      // Validar os par√¢metros obrigat√≥rios
      if (!userId) throw new Error('ID do usu√°rio n√£o fornecido');
      if (!planId) throw new Error('ID do plano n√£o fornecido');
      if (!subscriptionId) throw new Error('ID da assinatura n√£o fornecido');
      
        // Garantir que o userId √© um ObjectId v√°lido
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        throw new Error(`ID de usu√°rio inv√°lido: ${userId}`);
      }
      
      // Extrair informa√ß√µes do plano
      const {
        planName = null,
        planInterval = null,
        planDescription = null,
        planPrice = null,
        expiresAt = null
      } = planDetails;
      
      // Mapear o nome do plano para o n√∫mero interno
      const planNumber = mapPlanNameToNumber(planName);
      
      // Preparar os dados para atualiza√ß√£o
      const updateData = {
        plan_id: planId,
        subscription_id: subscriptionId,
        subscription_status: 'paid', // Usando 'paid' em vez de 'active' para corresponder ao enum definido
        updated_at: new Date()
      };
      
      // Adicionar campos extras se fornecidos
      if (planName) updateData.plan_name = planName;
      if (planInterval) updateData.plan_interval = planInterval;
      if (planDescription) updateData.plan_description = planDescription;
      if (planPrice) updateData.subscription_price = planPrice;
      if (expiresAt) updateData.subscription_expires_at = expiresAt;
      if (planNumber !== null) updateData.plan = planNumber;
      
      // Configurar data de cria√ß√£o da assinatura
      updateData.subscription_created_at = new Date();
      
      console.log('Dados de atualiza√ß√£o preparados:', JSON.stringify(updateData, null, 2));
      
      // Testar conex√£o explicitamente antes da opera√ß√£o
      const connectionTest = await mongoLog.testMongoConnection(secondConn);
      if (!connectionTest.writeSuccessful) {
        // Salvar informa√ß√µes em arquivo para tentar recupera√ß√£o posterior
        const backupData = {
          userId,
          planId,
          subscriptionId,
          planDetails,
          timestamp: new Date().toISOString()
        };
        
        // Usar utilit√°rio para garantir o caminho correto e exist√™ncia do diret√≥rio
        const backupPath = dirManager.getTempFilePath(`recovery_plan_update_${userId}_${Date.now()}.json`);
        fs.writeFileSync(backupPath, JSON.stringify(backupData, null, 2));
        
        throw new Error('Teste de escrita no MongoDB (myDatabase) falhou antes da atualiza√ß√£o');
      }
      
      console.log(`Atualizando usu√°rio na base secund√°ria myDatabase. ID: ${userId}`);
      
      // Criar modelo User na conex√£o secund√°ria
      const SecondaryUser = secondConn.model('User', require('../models/User').schema);
      
      // VERIFICA√á√ÉO ADICIONAL: Primeiro, tentar encontrar o usu√°rio de forma mais robusta na base secund√°ria
      const userExists = await findUserRobustlyInSecondary(userId, SecondaryUser);
      
      if (userExists) {
        // Se encontrou o usu√°rio na base secund√°ria, usar o ID correto dele para a atualiza√ß√£o
        userId = userExists._id.toString();
        console.log(`‚úì Usu√°rio encontrado via m√©todo robusto na base secund√°ria. ID correto: ${userId}`);
        
        // Atualizar na base secund√°ria
        const updatedUser = await SecondaryUser.findByIdAndUpdate(
          userId,
          { $set: updateData },
          { 
            new: true, 
            runValidators: true 
          }
        );
        
        // Se a atualiza√ß√£o na base secund√°ria foi bem-sucedida, tamb√©m atualiza na base principal
        if (updatedUser) {
          console.log(`‚úÖ Plano do usu√°rio atualizado com sucesso na base secund√°ria: ${updatedUser.name || updatedUser.email}`);
          
          try {
            // Atualizar tamb√©m na base principal para manter consist√™ncia
            await UserModel.findByIdAndUpdate(
              userId,
              { $set: updateData },
              { new: true }
            );
            console.log('‚úÖ Atualiza√ß√£o replicada para base principal com sucesso');
          } catch (mainDbError) {
            console.warn('‚ö†Ô∏è Falha ao replicar atualiza√ß√£o para base principal:', mainDbError);
            // Ainda consideramos sucesso mesmo se a replica√ß√£o para base principal falhar
          }
          
          return updatedUser;
        } else {
          throw new Error(`Falha na atualiza√ß√£o do usu√°rio na base secund√°ria: ${userId}`);
        }
      } else {
        // Se o usu√°rio n√£o existe na base secund√°ria, tentar criar
        console.log(`Usu√°rio n√£o encontrado na base secund√°ria. Tentando copiar da base principal...`);
        
        // Buscar usu√°rio na base principal
        const mainUser = await UserModel.findById(userId);
        if (mainUser) {
          console.log(`Usu√°rio encontrado na base principal. Copiando para base secund√°ria...`);
          
          // Preparar dados do usu√°rio para cria√ß√£o na base secund√°ria
          const userData = mainUser.toObject();
          delete userData._id; // Remover ID para permitir que MongoDB gere um novo
          
          // Adicionar dados de assinatura
          Object.assign(userData, updateData);
          
          // Criar usu√°rio na base secund√°ria
          const newSecondaryUser = await new SecondaryUser(userData).save();
          console.log(`‚úÖ Usu√°rio criado na base secund√°ria com ID: ${newSecondaryUser._id}`);
          
          return newSecondaryUser;
        } else {
          throw new Error(`Usu√°rio n√£o encontrado em nenhuma base de dados: ${userId}`);
        }
      }
    } catch (error) {
      lastError = error;
      console.error(`‚ùå [Tentativa ${attempts}] Erro ao atualizar plano do usu√°rio:`, error);
      
      // Salvar dados de erro para an√°lise posterior
      try {
        const errorLogPath = dirManager.getLogFilePath(`plan_update_error_${userId}_${Date.now()}.json`);
        fs.writeFileSync(errorLogPath, JSON.stringify({
          userId,
          planId,
          subscriptionId,
          planDetails,
          error: error.message,
          stack: error.stack,
          timestamp: new Date().toISOString()
        }, null, 2));
      } catch (logError) {
        console.error('Erro ao salvar log de erro:', logError);
      }
      
      // Se ainda h√° tentativas, espere um pouco antes de tentar novamente
      if (attempts < MAX_ATTEMPTS) {
        const waitTime = attempts * 1000; // Espera progressiva: 1s, 2s, 3s...
        console.log(`Aguardando ${waitTime}ms antes da pr√≥xima tentativa...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }
  }
  
  // Se chegamos aqui, todas as tentativas falharam
  throw lastError || new Error('Falha ao atualizar plano do usu√°rio ap√≥s v√°rias tentativas');
};

/**
 * Verifica e localiza um usu√°rio na base secund√°ria
 * @param {string} userId - ID do usu√°rio
 * @param {Model} SecondaryUser - Modelo de usu√°rio da base secund√°ria
 * @returns {Promise<Object|null>} Usu√°rio encontrado ou null
 */
async function findUserRobustlyInSecondary(userId, SecondaryUser) {
  try {
    if (!userId) {
      console.log('ID de usu√°rio n√£o fornecido');
      return null;
    }
    
    console.log(`Tentando localizar usu√°rio na base secund√°ria: ${userId}`);
    
    // 1. M√©todo padr√£o - findById direto
    try {
      const user = await SecondaryUser.findById(userId);
      if (user) {
        console.log(`‚úÖ Usu√°rio encontrado na base secund√°ria com findById: ${user.name || user.email}`);
        return user;
      }
    } catch (e) {
      console.log(`Erro ao usar findById na base secund√°ria: ${e.message}`);
    }
    
    // 2. Verificar se existe um usu√°rio com mesmo email na base principal
    try {
      const mainUser = await UserModel.findById(userId);
      if (mainUser && mainUser.email) {
        console.log(`Buscando usu√°rio na base secund√°ria pelo email: ${mainUser.email}`);
        const secondaryUser = await SecondaryUser.findOne({ email: mainUser.email });
        if (secondaryUser) {
          console.log(`‚úÖ Usu√°rio encontrado na base secund√°ria pelo email: ${secondaryUser._id}`);
          return secondaryUser;
        }
      }
    } catch (e) {
      console.log(`Erro ao buscar email do usu√°rio na base principal: ${e.message}`);
    }
    
    // 3. Se s√≥ tiver um usu√°rio na base secund√°ria, retorna este usu√°rio
    const countUsers = await SecondaryUser.countDocuments();
    if (countUsers === 1) {
      console.log('üîç H√° apenas UM usu√°rio na base secund√°ria, retornando este usu√°rio');
      const singleUser = await SecondaryUser.findOne({});
      if (singleUser) {
        return singleUser;
      }
    }
    
    // 4. Retorne null se n√£o encontrar nenhum usu√°rio
    console.log('‚ùå N√£o foi poss√≠vel encontrar usu√°rio na base secund√°ria');
    return null;
  } catch (error) {
    console.error('Erro ao buscar usu√°rio na base secund√°ria:', error);
    return null;
  }
}

/**
 * Cancela o plano de um usu√°rio
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<Object>} Usu√°rio atualizado
 */
exports.cancelUserPlan = async (userId) => {
  try {
    console.log(`Cancelando plano do usu√°rio: ${userId}`);
    
    if (!userId) throw new Error('ID do usu√°rio n√£o fornecido');
    
    // Garantir que o userId √© um ObjectId v√°lido
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error(`ID de usu√°rio inv√°lido: ${userId}`);
    }
    
    const updatedUser = await UserModel.findByIdAndUpdate(
      userId,
      {
        $set: {
          subscription_status: 'canceled',
          updated_at: new Date()
        }
      },
      { new: true }
    );
    
    if (!updatedUser) {
      throw new Error(`Usu√°rio n√£o encontrado: ${userId}`);
    }
    
    console.log(`Plano do usu√°rio cancelado com sucesso: ${updatedUser.name || updatedUser.email}`);
    return updatedUser;
  } catch (error) {
    console.error('Erro ao cancelar plano do usu√°rio:', error);
    throw error;
  }
};

/**
 * Obt√©m os detalhes do plano atual do usu√°rio
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<Object>} Detalhes do plano
 */
exports.getUserPlanDetails = async (userId) => {
  try {
    if (!userId) throw new Error('ID do usu√°rio n√£o fornecido');
    
    // Garantir que o userId √© um ObjectId v√°lido
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error(`ID de usu√°rio inv√°lido: ${userId}`);
    }
    
    const user = await UserModel.findById(userId);
    
    if (!user) {
      throw new Error(`Usu√°rio n√£o encontrado: ${userId}`);
    }
    
    return {
      plan: user.plan,
      plan_id: user.plan_id || null,
      plan_name: user.plan_name || null,
      plan_interval: user.plan_interval || null,
      plan_description: user.plan_description || null,
      subscription_id: user.subscription_id || null,
      subscription_status: user.subscription_status || 'inactive',
      subscription_price: user.subscription_price || null,
      subscription_created_at: user.subscription_created_at || null,
      subscription_expires_at: user.subscription_expires_at || null,
    };
  } catch (error) {
    console.error('Erro ao obter detalhes do plano do usu√°rio:', error);
    throw error;
  }
};
